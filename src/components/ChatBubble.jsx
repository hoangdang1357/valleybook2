import React, { useState, useEffect, useRef } from "react"; // Import useRef
import "./ChatBubble.css"; // Import file CSS

export default function ChatBubble() {
  const [open, setOpen] = useState(false);
  const [showInitialMessage, setShowInitialMessage] = useState(false);

  const chatWindowRef = useRef(null); // T·∫°o ref cho c·ª≠a s·ªï chat
  const chatBubbleRef = useRef(null); // T·∫°o ref cho icon bong b√≥ng

  // Hi·ªÉn th·ªã tin nh·∫Øn ban ƒë·∫ßu sau m·ªôt v√†i gi√¢y khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const timer = setTimeout(() => {
      setShowInitialMessage(true);
    }, 3000);

    return () => clearTimeout(timer);
  }, []);

  // ·∫®n tin nh·∫Øn ban ƒë·∫ßu khi c·ª≠a s·ªï chat ch√≠nh m·ªü
  useEffect(() => {
    if (open) {
      setShowInitialMessage(false);
    }
  }, [open]);

  // X·ª≠ l√Ω logic ƒë√≥ng pop-up khi click ra ngo√†i
  useEffect(() => {
    function handleClickOutside(event) {
      // Ki·ªÉm tra n·∫øu click kh√¥ng n·∫±m trong c·ª≠a s·ªï chat V√Ä kh√¥ng n·∫±m trong icon bong b√≥ng
      if (
        chatWindowRef.current &&
        !chatWindowRef.current.contains(event.target) &&
        chatBubbleRef.current &&
        !chatBubbleRef.current.contains(event.target)
      ) {
        setOpen(false); // ƒê√≥ng pop-up
      }
    }

    // Ch·ªâ th√™m event listener khi pop-up ƒëang m·ªü
    if (open) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    // Cleanup function: g·ª° b·ªè event listener khi component unmount ho·∫∑c pop-up ƒë√≥ng
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [open, chatWindowRef, chatBubbleRef]); // Ch·∫°y l·∫°i effect khi open state ho·∫∑c refs thay ƒë·ªïi

  const bubbleStyle = {
    position: "fixed",
    bottom: "20px",
    right: "20px",
    width: "60px",
    height: "60px",
    borderRadius: "50%",
    backgroundColor: "#007bff",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    color: "#fff",
    cursor: "pointer",
    boxShadow: "0 4px 6px rgba(0,0,0,0.1)",
    zIndex: 1000,
    transition: "transform 0.3s ease-in-out",
    transform: open ? "rotate(360deg)" : "rotate(0deg)",
  };

  // X·ª≠ l√Ω ƒë√≥ng tin nh·∫Øn ban ƒë·∫ßu (n·∫øu ng∆∞·ªùi d√πng click v√†o n√≥)
  const handleCloseInitialMessage = () => {
    setShowInitialMessage(false);
  };

  return (
    <>
      {/* C·ª≠a s·ªï chat ch√≠nh - Th√™m ref */}
      <div className={`chat-window ${open ? "open" : ""}`} ref={chatWindowRef}>
        <div style={{ padding: "10px", borderBottom: "1px solid #ddd" }}>
          <strong>H·ªó tr·ª£ tr·ª±c tuy·∫øn</strong>
        </div>
        <div style={{ flex: 1, padding: "10px", overflowY: "auto" }}>
          {/* N·ªôi dung chat ho·∫∑c t√≠ch h·ª£p chat widget */}
          <p>Ch√†o b·∫°n! Ch√∫ng t√¥i c√≥ th·ªÉ gi√∫p g√¨ h√¥m nay?</p>
        </div>
        <div style={{ padding: "10px", borderTop: "1px solid #ddd" }}>
          <input
            type="text"
            placeholder="Nh·∫≠p tin nh·∫Øn..."
            style={{ width: "100%", padding: "8px", boxSizing: "border-box" }}
          />
        </div>
      </div>

      {/* Tin nh·∫Øn pop-up ban ƒë·∫ßu */}
      {showInitialMessage && !open && (
        <div
          className="initial-message-popup"
          onClick={handleCloseInitialMessage}
        >
          Ch√∫ng t√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?
          <span className="initial-message-close-button">√ó</span>
        </div>
      )}

      {/* Icon bong b√≥ng chat - Th√™m ref */}
      <div
        style={bubbleStyle}
        onClick={() => setOpen(!open)}
        ref={chatBubbleRef}
      >
        {open ? "√ó" : "üí¨"}
      </div>
    </>
  );
}
